@page "/Admin/Archiv"

@inject DataManager dm
@inject IDialogService DialogService
@inject ISnackbar Snackbar

@if (result == null)
{
    <MudSkeleton />
    <MudSkeleton Animation="Animation.False" />
    <MudSkeleton Animation="Animation.Wave" />
}
else if (result.Type == NotificationType.Warn)
{
    <MudAlert Severity="Severity.Warning">В данный момент невозможно отобразить страницу, сервер не отвечает</MudAlert>
}
else if (result.Errors.Any(x => x == TypeOfErrors.NoContent))
{
    <MudAlert Severity="Severity.Info">
        Заявок в архиве нет
        <MudButton Color="Color.Primary"
                   Variant="Variant.Outlined"
                   StartIcon="@Icons.Material.Filled.Backspace">
            <a href="/ApplicationsToIT">Назад</a>
        </MudButton>
    </MudAlert>
}
else
{
    <MudTable Items="@application"
              Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped"
              Filter="(ApplicationTOITViewModel application) => FilterFunc(application, _searchString)"
              HorizontalScrollbar="true"
              SortLabel="Сортировать"
              Class="text-nowrap">
        <ToolBarContent>
            <MudFab Link="/ApplicationsToIT" Color="Color.Info" Icon="@Icons.Material.Filled.BackupTable" Size="Size.Small" IconSize="Size.Small" Class="ma-2" />
            
            @if (application.Any())
            {
                <MudFab OnClick="() => DeleteRange()" Label="Удалить все" Color="Color.Error" Icon="@Icons.Material.Filled.DeleteOutline" Size="Size.Small" IconSize="Size.Small" Class="ma-2" />
            }
            <MudFab OnClick="UpdateCache" Color="Color.Info" Icon="@Icons.Material.Filled.Update" Label="Обновить" Size="Size.Small" IconSize="Size.Small" Class="ma-2" />
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Поиск" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<ApplicationTOITViewModel, object>(x=>x.Id)">Номер</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<ApplicationTOITViewModel, object>(x=>x.State.Name)">Состояние</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<ApplicationTOITViewModel, object>(x=>x.EmployeeFullName)">Ответственный</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<ApplicationTOITViewModel, object>(x=>x.IniciatorFullName)">Инициатор</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<ApplicationTOITViewModel, object>(x=>x.Contact)">Контакт инициатора</MudTableSortLabel></MudTh>
        </HeaderContent>

        <RowTemplate>
            <MudTd DataLabel="">
                <MudMenu Variant="Variant.Outlined" Color="Color.Info" Icon="@Icons.Material.Filled.Settings">
                    <MudMenuItem Color="Color.Primary" Variant="Variant.Outlined" OnClick="() => ShowDetailsApplication(context)">
                        Подробнее
                    </MudMenuItem>

                    <MudMenuItem Color="Color.Error" Variant="Variant.Outlined" OnClick="() => Delete(context)">
                        Удалить заявку
                    </MudMenuItem>

                </MudMenu>
            </MudTd>
            <MudTd DataLabel="Номер">@context.Id</MudTd>
            <MudTd Style="@ColorBG(context.State.BGColor)" DataLabel="Состояние">@context.State.Name</MudTd>
            <MudTd Style="@ColorBG(context.State.BGColor)" DataLabel="Ответственный">@GetShortNameEmployee(context.EmployeeFullName)</MudTd>
            <MudTd Style="@ColorBG(context.State.BGColor)" DataLabel="Инициатор">@GetShortNameEmployee(context.IniciatorFullName)</MudTd>
            <MudTd Style="@ColorBG(context.State.BGColor)" DataLabel="Контакт инициатора">@context.Contact</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager RowsPerPageString="Заявок на странице" InfoFormat="{first_item}-{last_item} из {all_items}" />
        </PagerContent>
    </MudTable>
}

@code {
    private bool dense = true;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string _searchString = "";

    ActionResult<ApplicationTOITViewModel> result;
    List<ApplicationTOITViewModel> application;

    private async Task<DialogResult> ShowDialog(CreateOrEditApplicationToITViewModel entity, string message)
    {
        var options = new DialogOptions() { MaxWidth = MaxWidth.Small, Position = DialogPosition.CenterRight };
        var parameters = new DialogParameters { ["Model"] = entity };
        var dialog = DialogService.Show<ApplicationToITDialogComponent>(message, parameters, options);
        return await dialog.Result;
    }

    private async Task UpdateCache()
    {
        var applicationResult = await dm.ApplicationsTOITDataManager.ListOrOnDelete();
        result = new ActionResult<ApplicationTOITViewModel>(applicationResult.Type, applicationResult.Text, applicationResult.Title, applicationResult.Errors);
        if (result.Type == NotificationType.Warn) { }
        else if (result.Type != NotificationType.Success) Snackbar.Add(result.Text, Severity.Error);
        else
        {
            application = applicationResult.Data;
            application.Sort();
            Snackbar.Add("Данные успешно обновлены", Severity.Success);
        }
    }

    private async Task GetViewModels(bool updateCache = true)
    {
        var actionResult = await dm.ApplicationsTOITDataManager.ListOrOnDelete(updateCache);
        result = new ActionResult<ApplicationTOITViewModel>(actionResult.Type, actionResult.Text, actionResult.Title, actionResult.Errors);
        if (result.Type == NotificationType.Success)
        {
            application = actionResult.Data;
            application.Sort();
        }
        else application = new List<ApplicationTOITViewModel>();
    }

    private string GetShortNameEmployee(string fullName)
    {
        if (string.IsNullOrEmpty(fullName)) return null;
        var employeeName = fullName.Split(" ");
        var surname = employeeName[0];
        var name = employeeName[1][0];
        var patronymic = employeeName[2][0];
        return $"{surname} {name}. {patronymic}.";
    }

    protected override async Task OnInitializedAsync()
    {
        await GetViewModels(false);
        await base.OnInitializedAsync();
    }

    private async Task Delete(ApplicationTOITViewModel entity)
    {
        var options = new DialogOptions() { MaxWidth = MaxWidth.ExtraSmall, Position = DialogPosition.TopCenter };
        var dialog = DialogService.Show<ConfirmDeleteDiaologAdminComponent>($"Подтвердите действие", options);
        var resultDialog = await dialog.Result;

        if (!resultDialog.Cancelled)
        {
            result = await dm.ApplicationsTOITDataManager.DeleteAsync(entity.Id);
            if (result.Type == NotificationType.Warn) { }
            else if (result.Type != NotificationType.Success) Snackbar.Add(result.Text, Severity.Error);
            else
            {
                application.Remove(entity);
                application.Sort();
                Snackbar.Add("Заявка успешно удалена", Severity.Success);
            }
        }
    }

    private async Task DeleteRange()
    {
        var options = new DialogOptions() { MaxWidth = MaxWidth.ExtraSmall, Position = DialogPosition.TopCenter };
        var dialog = DialogService.Show<ConfirmDeleteDiaologAdminComponent>($"Подтвердите действие", options);
        var resultDialog = await dialog.Result;

        if (!resultDialog.Cancelled)
        {
            result = await dm.ApplicationsTOITDataManager.DeleteRange();
            if (result.Type == NotificationType.Warn) { }
            else if (result.Type != NotificationType.Success) Snackbar.Add(result.Text, Severity.Error);
            else
            {
                application = new List<ApplicationTOITViewModel>();
                Snackbar.Add("Архив успешно очищен", Severity.Success);
            }
        }
    }

    private void ShowDetailsApplication(ApplicationTOITViewModel entity)
    {
        var options = new DialogOptions() { MaxWidth = MaxWidth.Small, Position = DialogPosition.Center };
        var parameters = new DialogParameters { ["Model"] = entity };
        var dialog = DialogService.Show<DetailsApplicationComponent>($"Заявка №{entity.Id}", parameters, options);
    }

    private bool FilterFunc(ApplicationTOITViewModel application, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (application.DepartamentName.ToLower().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (application.State.Name.ToLower().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (application.Type.Name.ToLower().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (application.Priority.Name.ToLower().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (!string.IsNullOrEmpty(application.EmployeeFullName))
        {
            if (application.EmployeeFullName.ToLower().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        }
        if (application.Id.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    protected string ColorBG(string color) => $"background-color:{color};width:150px";
}
