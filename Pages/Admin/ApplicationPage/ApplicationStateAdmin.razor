@page "/Admin/Application/State"

@inject DataManager dm
@inject IDialogService DialogService
@inject ISnackbar Snackbar

@if (result == null)
{
    <MudSkeleton />
    <MudSkeleton Animation="Animation.False" />
    <MudSkeleton Animation="Animation.Wave" />
}
else if (result.Type == NotificationType.Warn)
{
    <MudAlert Severity="Severity.Warning">В данный момент невозможно отобразить страницу, сервер не отвечает</MudAlert>
}
else if (result.Errors.Any(x => x == TypeOfErrors.NoContent))
{
    <MudAlert Severity="Severity.Info">
        В вашей организации не зарегистрировано ниодного состояния
        <MudButton Color="Color.Success" StartIcon="@Icons.Material.Filled.Create" Variant="Variant.Outlined"
                   OnClick="() => Create()">Добавить</MudButton>
    </MudAlert>
}
else
{
    <MudTable Items="@states"
              Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped"
              Filter="(ApplicationStateViewModel entity) => FilterFunc(entity, _searchString)">
        <ToolBarContent>
            <MudFab OnClick="() => Create()" Color="Color.Success" Icon="@Icons.Material.Filled.Add" Size="Size.Small" IconSize="Size.Small" Class="ma-2" />
            <MudFab OnClick="UpdateCache" Color="Color.Info" Icon="@Icons.Material.Filled.Update" Label="Обновить" Size="Size.Small" IconSize="Size.Small" Class="ma-2" />
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Поиск" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<ApplicationStateViewModel, object>(x=>x.Id)">Номер состояния</MudTableSortLabel></MudTh>
            <MudTh>По умолчанию</MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<ApplicationStateViewModel, object>(x=>x.Name)">Название</MudTableSortLabel></MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Номер состояния">@context.Id</MudTd>
            <MudTd>
                @if (context.IsDefault)
                 {
                    <MudChip Text="blue" Variant="Variant.Outlined" Color="Color.Info">По умолчанию</MudChip>
                 }
            </MudTd>
            <MudTd  DataLabel="Название">
                <MudButton Style="@ColorBG(context.BGColor)"
                               Variant="Variant.Outlined"
                               >@context.Name</MudButton>
            </MudTd>
            
            <MudTd>
                <MudSpacer />
                <MudButtonGroup OverrideStyles="false">
                    <MudButton Color="Color.Primary"
                               Variant="Variant.Outlined"
                               StartIcon="@Icons.Material.Filled.Settings"
                               OnClick="() => Update(context)">Редактировать</MudButton>
                    <MudButton Color="Color.Secondary" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Delete" OnClick="() => Delete(context)">Удалить</MudButton>
                </MudButtonGroup>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager RowsPerPageString="Заявок на странице" InfoFormat="{first_item}-{last_item} из {all_items}" />
        </PagerContent>
    </MudTable>
}

@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string _searchString = "";

    ActionResult<ApplicationStateViewModel> result;
    List<ApplicationStateViewModel> states;

    private async Task UpdateCache()
    {
        var stateResult = await dm.ApplicationStatesManager.GetListViewModelsAsync();
        result = new ActionResult<ApplicationStateViewModel>(stateResult.Type, stateResult.Text, stateResult.Title, stateResult.Errors);
        if (result.Type == NotificationType.Warn) { }
        else if (result.Type != NotificationType.Success) Snackbar.Add(result.Text, Severity.Error);
        else
        {
            states = stateResult.Data;
            states.Sort();
            Snackbar.Add("Данные успешно обновлены", Severity.Success);
        }
    }

    private async Task<DialogResult> ShowDialog(ApplicationStateViewModel entity, string message)
    {
        var options = new DialogOptions() { MaxWidth = MaxWidth.Small, Position = DialogPosition.Center };
        var parameters = new DialogParameters { ["Model"] = entity };
        var dialog = DialogService.Show<AppliactionStateAdminDialogComponent>(message, parameters, options);
        return await dialog.Result;
    }

    private async Task GetViewModels(bool updateCache = true)
    {
        var actionResult = await dm.ApplicationStatesManager.GetListViewModelsAsync(updateCache);
        result = new ActionResult<ApplicationStateViewModel>(actionResult.Type, actionResult.Text, actionResult.Title, actionResult.Errors);
        if (result.Type == NotificationType.Success)
        {
            states = actionResult.Data;
            states.Sort();
        }
        else states = new List<ApplicationStateViewModel>();
    }

    protected override async Task OnInitializedAsync()
    {
        await GetViewModels(false);
        await base.OnInitializedAsync();
    }

    private async Task Create(ApplicationStateViewModel entity = null)
    {
        var model = entity == null ? new ApplicationStateViewModel() : entity;
        var resultDialog = await ShowDialog(model, "Создание");

        if (!resultDialog.Cancelled)
        {
            result = await dm.ApplicationStatesManager.CreateAsync((ApplicationStateViewModel)resultDialog.Data);
            if (result.Type == NotificationType.Warn) { }
            else if (result.Type != NotificationType.Success)
            {
                Snackbar.Add(result.Text, Severity.Error);
                await Create((ApplicationStateViewModel)resultDialog.Data);
            }
            else
            {
                await GetViewModels();
                Snackbar.Add("Состояние успешно добавлено", Severity.Success);
            }
        }
    }

    private async Task Update(ApplicationStateViewModel entity)
    {
        var model = new ApplicationStateViewModel(entity.Id, entity.Name, entity.BGColor, entity.IsDefault);
        var resultDialog = await ShowDialog(model, "Изменение");

        if (!resultDialog.Cancelled)
        {
            result = await dm.ApplicationStatesManager.UpdateAsync((ApplicationStateViewModel)resultDialog.Data);
            if (result.Type == NotificationType.Warn) { }
            else if (result.Type != NotificationType.Success)
            {
                Snackbar.Add(result.Text, Severity.Error);
                await Update((ApplicationStateViewModel)resultDialog.Data);
            }
            else
            {
                await GetViewModels();
                Snackbar.Add("Параметры успешно применены", Severity.Success);
            }
        }
    }

    private async Task Delete(ApplicationStateViewModel entity)
    {
        var options = new DialogOptions() { MaxWidth = MaxWidth.ExtraSmall, Position = DialogPosition.TopCenter };
        var dialog = DialogService.Show<ConfirmDeleteDiaologAdminComponent>($"Подтвердите действие", options);
        var resultDialog = await dialog.Result;

        if (!resultDialog.Cancelled)
        {
            result = await dm.ApplicationStatesManager.DeleteAsync(entity.Id);
            if (result.Type == NotificationType.Warn) { }
            else if (result.Type != NotificationType.Success) Snackbar.Add(result.Text, Severity.Error);
            else
            {
                states.Remove(entity);
                if(states.Any()) states.Sort();
                Snackbar.Add("Состояние успешно удалено", Severity.Success);
            }
        }
    }

    private bool FilterFunc(ApplicationStateViewModel entity, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (entity.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    protected string ColorBG(string color)
    {
        return $"background-color:{color};width:150px";
    }
}

