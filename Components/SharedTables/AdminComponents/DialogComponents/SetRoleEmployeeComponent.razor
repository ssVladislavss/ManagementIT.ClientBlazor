@inject DataManager dm
@inject ISnackbar Snackbar
@inject IDialogService DialogService


@*<MudDialog>

    <DialogContent>


        <MudGrid>
            <MudItem xs="12" md="12">
                <MudSelect T="string" Label="Роли" MultiSelection="true" @bind-Value="value" @bind-SelectedValues="options">
                    @foreach (var role in Model.SelectedRole)
                    {
                        <MudSelectItem T="string" Value="@role.Name">
                            @role.Name
                            <MudIconButton OnClick="() => DeleteRole(role)" Icon="@Icons.Material.Filled.Delete" Color="Color.Error"></MudIconButton>
                        </MudSelectItem>

                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="6">
                <MudText Typo="Typo.body2">"@AddValue()"</MudText>
            </MudItem>
        </MudGrid>

        @if (isActiveCreateIcon)
        {
            <MudButton OnClick="Active" StartIcon="@Icons.Material.Filled.Create" Color="Color.Success">Создать</MudButton>
        }
        else
        {
            <MudButton OnClick="Disabled" StartIcon="@Icons.Material.Filled.ExitToApp" Color="Color.Error">Закрыть</MudButton>
        }
        @if (isActiveField)
        {
            <MudForm Model="@role" @ref="form">
                <MudTextField @bind-Value="role.Name"
                              Label="Добавить новую роль"
                              Required="true"
                              For="()=> role.Name"
                              Validation="role.Validator.IsValid"></MudTextField>

            </MudForm>
            <MudButton Style="Margin-top:5px;" OnClick="CreateRole" StartIcon="@Icons.Material.Filled.Create" Variant="Variant.Outlined" Color="Color.Success">Создать</MudButton>

        }
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Info" OnClick="Confirm">Подтвердить</MudButton>
        <MudButton OnClick="Cancel">Отмена</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public CreateOrEditRoleEmployeeModel Model { get; set; }

    private RoleViewModel role;
    private bool isActiveField = false;
    private bool isActiveCreateIcon = true;

    MudForm form;

    private async Task CreateRole()
    {
        
        role.RoleNames = new List<string>() { role.Name };

        var result = await dm.RoleManager.CreateRoleAsync(role);

        if (result.Type == NotificationType.Warn)
            Snackbar.Add(result.Text, Severity.Warning);
        else if (result.Type != NotificationType.Success)
            Snackbar.Add(result.Text, Severity.Error);
        else
        {
            Model.SelectedRole.Add(role);
            role.Name = "";
            Snackbar.Add("Роль успешно создана", Severity.Success);
        }
    }

    private async Task DeleteRole(RoleViewModel entity)
    {
        var options = new DialogOptions() { MaxWidth = MaxWidth.ExtraSmall, Position = DialogPosition.TopCenter };
        var dialog = DialogService.Show<ConfirmDeleteDiaologAdminComponent>($"Подтвердите действие!", options);
        var resultDialog = await dialog.Result;

        if (!resultDialog.Cancelled)
        {
            var result = await dm.RoleManager.DeleteRoleAsync(entity);

            if (result.Type == NotificationType.Warn)
                Snackbar.Add(result.Text, Severity.Warning);
            else if (result.Type != NotificationType.Success)
                Snackbar.Add(result.Text, Severity.Error);
            else
            {
                Model.SelectedRole.Remove(entity);
                role.Name = "";
                Snackbar.Add("Роль успешно удалена", Severity.Success);
            }
        }
    }

    private void Active()
    {
        isActiveField = true;
        isActiveCreateIcon = false;
    }

    private void Disabled()
    {
        isActiveField = false;
        isActiveCreateIcon = true;
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private void Confirm()
    {
        Model.RoleNames = options.Select(x => x).ToList();
        MudDialog.Close(DialogResult.Ok(Model));
    }

    private bool success;
    MudTextField<string> textValid;
    private int count = 0;

    private string AddValue()
    {
        if (Model.RoleNames.Any())
        {
            if (count == 0)
            {
                foreach (var roleName in Model.RoleNames)
                {
                    options.Add(roleName);
                }
                count++;
            }
        }
        return value;
    }
    private string value { get; set; }
    private HashSet<string> options { get; set; } = new HashSet<string>();
}*@